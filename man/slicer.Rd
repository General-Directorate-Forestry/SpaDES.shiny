% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slicer.R
\name{slicerUI}
\alias{slicerUI}
\alias{slicer}
\title{Slicer shiny module}
\usage{
slicerUI(id)

slicer(input, output, session, datatable, categoryValue, uiSequence,
  serverFunction, uiFunction, chosenCategories = NULL, chosenValues = NULL)
}
\arguments{
\item{id}{An ID string that corresponds with the ID used to call the module's UI function.}

\item{input}{Shiny server input object.}

\item{output}{Shiny server output object.}

\item{session}{Shiny server session object.}

\item{datatable}{Reactive value containing data in form of a \code{data.table}.
This data.table is not changed.
Its subtables are accessed using \code{chosenCategories} and
\code{chosenValues} arguments.
This is helpful, because the end summary function might require
information about entire data table.}

\item{categoryValue}{Each time the data table is sliced (one dimension is cut off),
concrete value of the category is set. This argument stores this value.}

\item{uiSequence}{A \code{data.table} of the form
\code{data.table(category = list_of_categories, uiType = list_of_ui_actions)}.
Both lists should contain elements of type character.
The \code{category} column should contain names of the categories
which will be subsequently fixed. The \code{uiType} column
should contain corresponding UI which should be applied for each
category choice. Currently there are two possible UI
types to perform: "tab" and "box".
Type "box": should be used only together with \pkg{shinydashboard}.
An example of proper \code{uiSequence} is
\code{data.table(category = c("Alliance", "Kingdom"), uiType = c("tab", "box"))}.}

\item{serverFunction}{A summary module server function. This function should take
three arguments: \code{data}, \code{chosenCategories} and
\code{chosenValues}. Inside the function there should be
a call to shiny module server function. See example section
and compare with \code{link[shiny]{callModule}}).}

\item{uiFunction}{A summary module function UI. This function should take
one argument: \code{na}. Inside the function there should be
a call to shiny module UI function. See example section.}

\item{chosenCategories}{A list with categories names that were already chosen.
Default \code{NULL}.}

\item{chosenValues}{A list with categories values that were already chosen.
Default \code{NULL}.}
}
\value{
Shiny module UI.

Shiny module server function.
}
\description{
One can imagine behaviour of this module in the following way.
A tree of height m is created. We begin at the top of the tree with the entire data table.
A category (column) from a data table is chosen.
This choice is determined by an user using \code{uiSequence} argument.
Each value of this fixed category determines a subtable of the data table.
For each value choice a child node is created.
Value choice is passed to the corresponding child node.
Therefore every child node implicitly receives a subtable corresponding to the
received value choice.
Child node also receives an information from user which category should be fixed next.
It then performs the same calculations as the top node, but based on the implicitly
received subtable.
Simultaneously, for each node desired UI (e.g., tabs) is created.
If no information about next category to fix is provided for a node,
it assumes it is a leaf. At the end, at each leaf,
a summary function is applied. Note that each leaf (and each node) receives
the entire data table and the information about chosen values leading to this
leaf (node).
Hence summary can be based on implicitly determined subtable, but also based
on entire data table or some subtable determined by a subset of chosen values.
}
\author{
Mateusz Wyszynski

Mateusz Wyszynski
}
